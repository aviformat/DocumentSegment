L. SOFM ts an unsupervised learning algorithm. We can start the learning procedure with bo assumptions on any expected access patterns to the underlying persistent object store.
2.	The algorithm is an iterative learning one and adapts itself to changes in input statistics. Thus, in the case of clustering in persistent object stores the algorithm captures the changes in the access patterns to the persistent object store and/or the changes in the frequency of these access patterns.
3.	The feature map preserves the input neighbourhood relationships. This is essential for our clustering algorithm. It can also be used to improve performance of retrieval operations since it finds an order between the clusters [CheOl).
4.	More frequently inputs are taken into account and they create larger neighbourhoods, i.«. more frequently queries arc taken into account in the learning process.
3 Modelling the Clustering Problem
We now describe the way by which we model the clustering problem in a persistent object store environment and how Kohonen's SOFM algorithm can be applied to it* We assume that each persistent object in the persistent object store is associated with an invariant unique Identity, called object identity. The object identity is the means by which objects refer to each other and allows sharing of objects. In [Tuv92] we realise the concept of object identity by using logical identities rather than physical addresses in order to allow mobility of objects within the store; this allows clustering of any set of objects.
As mentioned earlier, the underlying persistent object store can be modelled as a frmpJL Based on this graph, many researchers, model the clustering problem as a graph partitioning problem. The advantage of this approach is that one can use existing algorithms, which solve the graph partitioning problem, such as the heuristic algorithm of Kernighan-Lin [Ker70] and optimisation algorithm using simulated annealing (Joh 19]. However, in an example given later In the paper, we show that it Is mote accurate to view the persistent object store together with the accesses to that store as a hypcrgraph, since the accesses to the persistent object store are not based solely on the structure of the said graph but also can be set-oriented, whereby a set of retrieved objects do not necessarily follow the said graph structure.
Before we give a formal description of the clustering problem we first Introduce the concepts of /salare and co-re/rrvace with regard to the persistent object store.
A /eeiure is any concept which is used for learning by the clustering algorithm. A persistent object is a feature. However, a feature can be any other concept such as a type in a type system or even special values or terms which are expected to be important with regard to clustering organisation.
A co-reference is a a sst of features. Mostly conferences represent actual answers to qusrles posed to the persistent object store but they can also represent answers to sxpected queries. An example of co-reference can be the query to retrieve a fathsr and his children or even retrieval of the whole family.
We next model the problem of clustering in a persistent object store as the problem of node partitioning in a hypergraph. Let P s (JF\ V, Qt J) be
79