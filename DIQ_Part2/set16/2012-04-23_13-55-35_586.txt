4A*m~** mi £*ff*t*rirtf Softwaet IW2, 14. 31-*)9
Identification of the boundary surfaces in 3D
finite element codes
irenfttsz Szczygiel, Andrnj Szlfk, Ryszard Bialecki & Andrzej J. Nowak
Institute of thermal Technology, Silesum Technical University, Konarskiego 22. 44 101 Gliwtce. Poland
For a given 3D FEM net defined by a domain connectivity array a boundary connectivity array is generated. The latter contains boundary nodes over which subsequent boundary elements are spanned. An algorithm can be used to check the consistency of the input connectivity array. It can also be useful in pre and postprocessors in hidden lines removal. A list of appropriate routines is included.
i INTRODUCTION
Some applications of the finite element method demand integration over the boundary of the body under consideration To carry out this integration the boundary surface should be defined by grouping the boundary nodes into boundary elements. Heat conduction problems with boundary conditions of the third kind are a typical example of this class of problem. The standard approach used in structural mechanics of converting boundary loads into nodal forces has no simple equivalence in this case.
The definition of the boundary surface can be also useful in input and output graphic programs where hidden line removal is often required. The knowledge of the bounding surfaces allows an efficient transition from the wireframe model defined by the domain connectivity array into a sobd model described by a boundary connectivity array.
THe domain connectivity array, grouping the nodes Ato &mte elements, comprises a considerable portion of data needed to run an FBM code and the chance of conusutuftg errors when preparing this mama is high, fi «therefore important to dwek consistency of this array. Tlw dewt toped algorithm performs this task by cross rtmiing, e g- whether the surfaces generated by processing the coeaectmt) maim am dosed and band die
1 INSCRIPTION Of THE ALGORITHM
The pttmnt pwper a an caMMae* of a previous one dealing satfe *f> gwoMm*.'' It coosm* of three stages
IM fiws 1*mm» Nlliiin tag.
(i)	unpacking the domain connectivity matrix into faces connectivity matrix. Within this stage subsequent finite elements are converted into their faces. The nodes over which the faces are spanned are stored in a face connectivity matrix;
(ii)	processing the face connectivity matrix to find the boundary elements. The nodes these elements are spanned over are stored in the boundary connectivity matrix:
(iii)	grouping the boundary elements into dosed boundary surfaces
The appendix contains the list of appropriate rouunes. This computer implementation of the algorithm can deal with linear (8 nodes) or quadratic (20 nodes) brick elements as well as with all kinds of transition linear -quadratic ones.
The local nodes numbering pattern of a finite dement used in routines listed in the Appendix is shown tn Fig. I. The local numbers of nodes within a face are shown in Fig. 2. Other numbering schemes can be easily incorporated into the program.
The first step of the algorithm a executed within the routine UNPACK. All fsces bounding a given (kate dement are generated from data stored m the domain connectivity matrix IX. The scheme of unpacking ctements into faces is coded by the tocai nodes m«m6er\ftg pattern stored in the array IFAOEPATTEJIK awusiiind by a DATA statement ut the UNPACK routine Hie result of the unpacking, t.e the pobm numbers of node* associated with a given fact, mt tiered m tfre Stat Mctivity matrix IF ACE- lad* cohaaa of fill maant corresponds to one tee of a Nmst efcmem
Elements having tnaagwlar facts aft §mmmi If doafebag appro?*)** nodes An- uampfcr of UMi tomi if element a ifcaam m $>%. I at afcasfc Iact <Maii If pomes IJU.4 m Fig t laa bara ifcgtaarsatf m*m I**
XI