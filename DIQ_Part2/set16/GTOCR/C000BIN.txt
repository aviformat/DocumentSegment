Advances in Engineering Software 1992. 14, 33-39
Identification of the boundary surfaces in 3D
finite element codes
Ireneusz Szczygiel, Andrzej Szlek, Ryszard Bialecki & Andrzej J. Nowak
Institute of Thermal Technology, Silesian Technical University, Konarskiego 22, 44 101 Gliwice, Poland
For a given 3D FEM net defined by a domain connectivity array a boundary connectivity array is generated. The latter contains boundary nodes over which subsequent boundary elements are spanned. An algorithm can be used to check the consistency of the input connectivity array. It can also be useful in pre and postprocessors in hidden lines removal. A list of appropriate routines is included.
1	INTRODUCTION
Some applications of the finite element method demand integration over the boundary of the body under consideration. To carry out this integration the boundary surface should be defined by grouping the boundary nodes into boundary elements. Heat conduction problems with boundary conditions of the third kind are a typical example of this class of problem. The standard approach used in structural mechanics of converting boundary loads into nodal forces has no simple equivalence in this case.
The definition of the boundary surface can be also useful in input and output graphic programs where hidden line removal is often required. The knowledge of the bounding surfaces allows an efficient transition from the wireframe model defined by the domain connectivity array into a solid model described by a boundary connectivity array.
The domain connectivity array, grouping the nodes into finite elements, comprises a considerable portion of data needed to run an FEM code and the chance of committing errors when preparing this matrix is high. It is therefore important to check consistency of this array. The developed algorithm performs this task by cross checking, e.g. whether the surfaces generated by processing the connectivity matrix are closed and band the domain
2	DESCRIPTION OF THE ALGORITHM
The present paper is an extension of a previous one dealing with 2D problems.1 It consists of three stages:
Advances in Engineering Software 0965-9978/92/S05.00 (!) 1992 Elsevier Science Publishers Ltd.
(i)	unpacking the domain connectivity matrix into faces connectivity matrix. Within this stage subsequent finite elements are converted into their faces. The nodes over which the faces are spanned are stored in a face connectivity matrix;
(ii)	processing the face connectivity matrix to find the boundary elements. The nodes these elements are spanned over are stored in the boundary connectivity matrix;
(iii)	grouping the boundary elements into closed boundary surfaces.
The appendix contains the list of appropriate routines. This computer implementation of the algorithm can deal with linear (8 nodes) or quadratic (20 nodes) brick elements as well as with all kinds of transition linear -quadratic ones.
The local nodes numbering pattern of a finite element used in routines listed in the Appendix is shown in Fig. 1. The local numbers of nodes within a face are shown in Fig. 2. Other numbering schemes can be easily incorporated into the program.
The first step of the algorithm is executed within the routine UNPACK. All faces bounding a given finite element are generated from data stored in the domain connectivity matrix IX. The scheme of unpacking elements into faces is coded by the local nodes numbering pattern stored in the array IFACEPATTERN, initialized by a DATA statement in the UNPACK routine. The result of the unpacking, i.e. the global numbers of nodes associated with a given face, are stored in the face connectivity matrix IFACE. Each column of this matrix corresponds to one face of a finite element.
Elements having triangular faces are generated by doubling appropriate nodes. An example of this kind of element is shown in Fig. 3 in which the face defined by points 1,2,3,4 in Fig. 1. has been degenerated to line 3-4.
33